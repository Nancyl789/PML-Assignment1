{"name":"Practical Machine Learning Assignment","tagline":"Practical Machine Learning Prediction Motivation","body":"#Background  \r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \r\n\r\n##Data  \r\nThe training data for this project are available here: \r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\r\nThe test data are available here: \r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\r\nThe data for this project come from this source: http://groupware.les.inf.puc-rio.br/har.\r\n\r\n###download packages\r\n    library (caret)  \r\n    library (kernlab)  \r\n    library (randomForest)  \r\n    library (MASS)  \r\n    library (rpart)\r\n\r\n###download/read the data\r\n    pml_training=read.csv('pml-training.csv', na.strings=c(\"NA\",\"\"))  \r\n    pml_testing=read.csv('pml-testing.csv', na.strings=c(\"NA\",\"\"))  \r\n\r\n>pml_training=19622 obs. of 160 variables  \r\n>[1] 19622   160\r\n\r\n###clean the data: removal of Near-Zero Values  \r\n    nzv <- nearZeroVar(pml_training)     \r\n    trainnzv <- pml_training[-nzv]  \r\n###clean the data: removal of NAs  \r\n    train1 <- trainnzv[, which(as.numeric(colSums(is.na(trainnzv)))==0)]   \r\n###clean the data: removal of non-numeric Vb (x, user_name, raw_time_stamp 1, and 2, cvtd_timestamp, num_window)  \r\n    train2 <- train1[,-(1:7)]\r\n\r\n###distribution of the Vb classe (A,B,C,D,E)  \r\n    table(train2$classe)  \r\n\r\n>   A    B    C    D    E    \r\n>5580 3797 3422 3216 3607  \r\n\r\n###split training data into a training (70%) and a testing (30%) dataset  \r\n    inTrain<-createDataPartition(y=train2$classe,\r\n                             p=0.7, list=FALSE)  \r\n###seed for pseudo-random generator  \r\n\r\n    set.seed(3333)  \r\n    trainSplit <- train2[inTrain,]  \r\n    testSplit <- train2[-inTrain,]  \r\n\r\n    table(trainSplit$classe) \r\n\r\n>   A    B    C    D    E  \r\n>3906 2658 2396 2252 2525  \r\n\r\n###barplot of levels of the vb classe\r\nplot(trainSplit$classe, col=\"blue\", main=\"Barplot of levels of the vb classe\", xlab=\"Classe levels\", ylab=\"Freq.\")\r\n\r\n\r\n###model1: Random Forest (RF)\r\n    RF <- train(classe ~ ., method = 'rf', data=trainSplit, ntrees=10)  \r\n\r\n###model2: Linear Discriminant Analysis (LDA)\r\n    LDA <- train(classe ~ ., method = 'lda', data = trainSplit)   \r\n\r\n###model3: Recursive Partitioning and Regression Trees (RPART)\r\n    RPART<- train(classe ~ ., method = 'rpart', data = trainSplit)  \r\n\r\n###test Accuracy model: Random Forest\r\n    RF_accuracy<- predict(RF, testSplit)  \r\n    print(confusionMatrix(RF_accuracy, testSplit$classe))  \r\n____________________________________________________\r\n>Confusion Matrix and Statistics   Reference   \r\n>Prediction  A    B    C    D    E  \r\n         A 1674    4    0    0    0  \r\n         B    0 1133   11    0    0  \r\n         C    0    2 1015   10    0  \r\n         D    0    0    0  953    0  \r\n         E    0    0    0    1 1082  \r\n___________________________________________________         \r\n>Overall Statistics  \r\n               Accuracy : 0.9952          \r\n                 95% CI : (0.9931, 0.9968)   \r\n    No Information Rate : 0.2845          \r\n    P-Value [Acc > NIR] : < 2.2e-16       \r\n                   Kappa : 0.994           \r\n Mcnemar's Test P-Value : NA        \r\n_________________________________________________________________\r\n>Statistics by Class:  \r\n                     Class: A Class: B Class: C Class: D Class: E  \r\nSensitivity            1.0000   0.9947   0.9893   0.9886   1.0000  \r\nSpecificity            0.9991   0.9977   0.9975   1.0000   0.9998  \r\nPos Pred Value         0.9976   0.9904   0.9883   1.0000   0.9991  \r\nNeg Pred Value         1.0000   0.9987   0.9977   0.9978   1.0000  \r\nPrevalence             0.2845   0.1935   0.1743   0.1638   0.1839  \r\nDetection Rate         0.2845   0.1925   0.1725   0.1619   0.1839  \r\nDetection Prevalence   0.2851   0.1944   0.1745   0.1619   0.1840  \r\nBalanced Accuracy      0.9995   0.9962   0.9934   0.9943   0.9999  \r\n_________________________________________________________________\r\n\r\n###test Accuracy model: Linear Discriminant Analysis\r\n    LDA_accuracy<- predict(LDA, testSplit)  \r\n    print(confusionMatrix(LDA_accuracy, testSplit$classe))  \r\n________________________________________________________________\r\n>Confusion Matrix and Statistics  \r\n Prediction\r\n             A    B    C    D    E  \r\n         A 1349  166   90   49   50  \r\n         B   40  740  103   55  164  \r\n         C  139  140  664  120  116  \r\n         D  137   43  152  678  115  \r\n         E    9   50   17   62  637\r\n______________________________________________________\r\n>Overall Statistics\r\n               Accuracy : 0.6912         \r\n                 95% CI : (0.6793, 0.703)  \r\n    No Information Rate : 0.2845         \r\n    P-Value [Acc > NIR] : < 2.2e-16      \r\n                  Kappa : 0.6096         \r\n   Mcnemar's Test P-Value : < 2.2e-16      \r\n________________________________________________________________\r\n>Statistics by Class:\r\n                     Class: A Class: B Class: C Class: D Class: E  \r\nSensitivity            0.8059   0.6497   0.6472   0.7033   0.5887  \r\nSpecificity            0.9157   0.9237   0.8940   0.9092   0.9713  \r\nPos Pred Value         0.7917   0.6715   0.5632   0.6027   0.8219  \r\nNeg Pred Value         0.9223   0.9166   0.9231   0.9399   0.9129  \r\nPrevalence             0.2845   0.1935   0.1743   0.1638   0.1839  \r\nDetection Rate         0.2292   0.1257   0.1128   0.1152   0.1082  \r\nDetection Prevalence   0.2895   0.1873   0.2003   0.1912   0.1317  \r\nBalanced Accuracy      0.8608   0.7867   0.7706   0.8062   0.7800  \r\n___________________________________________________________________\r\n\r\n###test Accuracy model: Recursive Partitioning and Regression Trees (RPART)\r\n    RPART_accuracy<- predict(RPART, testSplit)  \r\n    print(confusionMatrix(RPART_accuracy, testSplit$classe)) \r\n___________________________________________________________\r\n>Confusion Matrix and Statistics  \r\n     Prediction    A    B    C    D    E  \r\n         A 1508  440  471  420  236  \r\n         B   37  373   30   24  174  \r\n         C  128  284  525  354  300  \r\n         D    0   42    0  166   57  \r\n         E    1    0    0    0  315  \r\n_________________________________________________________         \r\n>Overall Statistics  \r\n               Accuracy : 0.4906          \r\n                 95% CI : (0.4777, 0.5034)  \r\n    No Information Rate : 0.2845          \r\n    P-Value [Acc > NIR] : < 2.2e-16      \r\n    Kappa : 0.335           \r\n Mcnemar's Test P-Value : < 2.2e-16       \r\n_____________________________________________________________________\r\n>Statistics by Class:\r\n                     Class: A Class: B Class: C Class: D Class: E  \r\nSensitivity            0.9008  0.32748  0.51170  0.17220  0.29113  \r\nSpecificity            0.6279  0.94416  0.78061  0.97988  0.99979  \r\nPos Pred Value         0.4904  0.58464  0.32998  0.62642  0.99684  \r\nNeg Pred Value         0.9409  0.85401  0.88333  0.85801  0.86227  \r\nPrevalence             0.2845  0.19354  0.17434  0.16381  0.18386  \r\nDetection Rate         0.2562  0.06338  0.08921  0.02821  0.05353  \r\nDetection Prevalence   0.5225  0.10841  0.27035  0.04503  0.05370  \r\nBalanced Accuracy      0.7644  0.63582  0.64615  0.57604  0.64546  \r\n___________________________________________________________________\r\n\r\n###the best model is Random Forest  \r\n#####model     Accuracy    Kappa  \r\n#####RF        0.9952      0.994  \r\n#####LDA       0.6912      0.6096   \r\n#####RPART     0.4906        0.335  \r\n\r\n###improve the model and to avoid over-fitting -> cross validation with 10 folds.\r\n    set.seed(3333)   \r\n    controlOF <- trainControl(method = \"repeatedcv\", number = 10, repeats = 10)  \r\n    RF_CV <- train(classe ~ ., method=\"rf\",  data=trainSplit, trControl = controlOF)\r\n\r\n###test Accuracy model: Random Forest\r\n    RF_CV_accuracy<- predict(RF_CV, testSplit) \r\n    print(confusionMatrix(RF_CV_accuracy, testSplit$classe))  \r\n__________________________________________________________________________________\r\n>Confusion Matrix and Statistics  \r\n  Prediction    A    B    C    D    E  \r\n         A 1673    5    0    0    0  \r\n         B    1 1131   12    0    0  \r\n         C    0    3 1014   10    0  \r\n         D    0    0    0  953    0  \r\n         E    0    0    0    1 1082  \r\n___________________________________________________________\r\n>Overall Statistics  \r\n                Accuracy : 0.9946          \r\n                 95% CI : (0.9923, 0.9963)  \r\n    No Information Rate : 0.2845          \r\n    P-Value [Acc > NIR] : < 2.2e-16       \r\n                  Kappa : 0.9931          \r\n Mcnemar's Test P-Value : NA              \r\n______________________________________________________________________\r\n>Statistics by Class:  \r\n                     Class: A Class: B Class: C Class: D Class: E  \r\nSensitivity            0.9994   0.9930   0.9883   0.9886   1.0000  \r\nSpecificity            0.9988   0.9973   0.9973   1.0000   0.9998  \r\nPos Pred Value         0.9970   0.9886   0.9873   1.0000   0.9991  \r\nNeg Pred Value         0.9998   0.9983   0.9975   0.9978   1.0000  \r\nPrevalence             0.2845   0.1935   0.1743   0.1638   0.1839  \r\nDetection Rate         0.2843   0.1922   0.1723   0.1619   0.1839  \r\nDetection Prevalence   0.2851   0.1944   0.1745   0.1619   0.1840  \r\nBalanced Accuracy      0.9991   0.9951   0.9928   0.9943   0.9999  \r\n____________________________________________________________________\r\n\r\n###test set prediction   \r\n    testing <- predict(RF, pml_testing)   \r\n    testing  \r\n \r\n#####Random forest provide the best results and the right predictions for the submission. The expected out-of-sample error is estimated at 0.005, or 0.5%.\r\n >1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20   \r\n >B  A  B  A  A  E  D  B  A  A  B  C  B  A  E  E  A  B  B  B   \r\n>Levels: A B C D E  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}